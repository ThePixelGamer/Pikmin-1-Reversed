/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'sysCore'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct HWND__;
struct HINSTANCE__;
struct tagMENUITEMINFOA;
struct HMENU__;
struct HBITMAP__;
struct _devicemodeA;
union _LARGE_INTEGER;
struct HICON__;
struct HBRUSH__;
struct _GUID;
struct ITypeInfo;
struct ITypeInfoVtbl;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct ITypeComp;
struct ITypeCompVtbl;
union tagBINDPTR;
struct tagFUNCDESC;
struct tagELEMDESC;
struct tagPARAMDESCEX;
struct tagVARIANT;
struct IUnknown;
struct IUnknownVtbl;
struct IDispatch;
struct IDispatchVtbl;
struct tagDISPPARAMS;
struct tagEXCEPINFO;
struct tagSAFEARRAY;
struct tagDEC;
struct IRecordInfo;
struct IRecordInfoVtbl;
struct tagVARDESC;
struct ITypeLib;
struct ITypeLibVtbl;
struct tagTLIBATTR;

/* 1 */
struct FuncInfo_V1
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
};

/* 2 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 3 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 4 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 288 */
typedef void *PVOID;

/* 10 */
typedef unsigned int DWORD;

/* 5 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 6 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 7 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 8 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 11 */
typedef HWND__ *HWND;

/* 13 */
typedef HINSTANCE__ *HINSTANCE;

/* 16 */
typedef char CHAR;

/* 15 */
typedef const CHAR *LPCSTR;

/* 17 */
typedef CHAR *LPSTR;

/* 18 */
typedef unsigned __int16 WORD;

/* 20 */
typedef int LONG;

/* 19 */
typedef LONG LPARAM;

/* 22 */
typedef unsigned int UINT;

/* 23 */
typedef UINT WPARAM;

/* 21 */
typedef UINT (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

/* 9 */
#pragma pack(push, 1)
struct tagOFNA
{
  DWORD lStructSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCSTR lpstrFilter;
  LPSTR lpstrCustomFilter;
  DWORD nMaxCustFilter;
  DWORD nFilterIndex;
  LPSTR lpstrFile;
  DWORD nMaxFile;
  LPSTR lpstrFileTitle;
  DWORD nMaxFileTitle;
  LPCSTR lpstrInitialDir;
  LPCSTR lpstrTitle;
  DWORD Flags;
  WORD nFileOffset;
  WORD nFileExtension;
  LPCSTR lpstrDefExt;
  LPARAM lCustData;
  LPOFNHOOKPROC lpfnHook;
  LPCSTR lpTemplateName;
};
#pragma pack(pop)

/* 12 */
struct HWND__
{
  int unused;
};

/* 14 */
struct HINSTANCE__
{
  int unused;
};

/* 24 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 25 */
typedef tagMENUITEMINFOA MENUITEMINFOA;

/* 27 */
typedef HMENU__ *HMENU;

/* 29 */
typedef HBITMAP__ *HBITMAP;

/* 26 */
struct tagMENUITEMINFOA
{
  UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  DWORD dwItemData;
  LPSTR dwTypeData;
  UINT cch;
  HBITMAP hbmpItem;
};

/* 28 */
struct HMENU__
{
  int unused;
};

/* 30 */
struct HBITMAP__
{
  int unused;
};

/* 31 */
typedef _devicemodeA DEVMODEA;

/* 33 */
typedef unsigned __int8 BYTE;

/* 35 */
struct _devicemodeA::$1DE029518E5B112A14BB6E76DECCA4C4::$5ACE225D4D14CE0550A9F5A217E306C5
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
};

/* 37 */
struct _POINTL
{
  LONG x;
  LONG y;
};

/* 36 */
typedef _POINTL POINTL;

/* 34 */
union _devicemodeA::$1DE029518E5B112A14BB6E76DECCA4C4
{
  struct
  {
    __int16 dmOrientation;
    __int16 dmPaperSize;
    __int16 dmPaperLength;
    __int16 dmPaperWidth;
  };
  POINTL dmPosition;
};

/* 32 */
struct _devicemodeA
{
  BYTE dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  union
  {
    struct
    {
      __int16 dmOrientation;
      __int16 dmPaperSize;
      __int16 dmPaperLength;
      __int16 dmPaperWidth;
    };
    POINTL dmPosition;
  };
  __int16 dmScale;
  __int16 dmCopies;
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  BYTE dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  DWORD dmDisplayFlags;
  DWORD dmDisplayFrequency;
  DWORD dmICMMethod;
  DWORD dmICMIntent;
  DWORD dmMediaType;
  DWORD dmDitherType;
  DWORD dmReserved1;
  DWORD dmReserved2;
  DWORD dmPanningWidth;
  DWORD dmPanningHeight;
};

/* 38 */
struct _OSVERSIONINFOA
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
};

/* 41 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 40 */
typedef tagPOINT POINT;

/* 39 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 43 */
typedef int time_t;

/* 44 */
typedef unsigned int _fsize_t;

/* 42 */
#pragma pack(push, 8)
struct _finddata_t
{
  unsigned int attrib;
  time_t time_create;
  time_t time_access;
  time_t time_write;
  _fsize_t size;
  char name[260];
};
#pragma pack(pop)

/* 45 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 47 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 48 */
typedef __int64 LONGLONG;

/* 46 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 49 */
typedef tagRECT RECT;

/* 52 */
typedef LONG LRESULT;

/* 51 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 53 */
typedef HICON__ *HICON;

/* 55 */
typedef HICON HCURSOR;

/* 56 */
typedef HBRUSH__ *HBRUSH;

/* 50 */
struct tagWNDCLASSEXA
{
  UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
  HICON hIconSm;
};

/* 54 */
struct HICON__
{
  int unused;
};

/* 57 */
struct HBRUSH__
{
  int unused;
};

/* 58 */
#pragma pack(push, 4)
struct WSAData
{
  WORD wVersion;
  WORD wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
};
#pragma pack(pop)

/* 60 */
typedef unsigned __int16 u_short;

/* 59 */
#pragma pack(push, 4)
struct sockaddr
{
  u_short sa_family;
  char sa_data[14];
};
#pragma pack(pop)

/* 62 */
typedef unsigned int u_int;

/* 63 */
typedef u_int SOCKET;

/* 61 */
#pragma pack(push, 4)
struct fd_set
{
  u_int fd_count;
  SOCKET fd_array[64];
};
#pragma pack(pop)

/* 64 */
struct AyuStack;

/* 65 */
struct RandomAccessStream;

/* 66 */
struct BufferedInputStream;

/* 67 */
struct RamStream;

/* 68 */
struct ANode;

/* 69 */
struct Vector2f;

/* 70 */
struct Vector2i;

/* 71 */
struct Vector3f;

/* 72 */
struct Material;

/* 73 */
struct Font;

/* 74 */
struct Quat;

/* 75 */
struct Plane;

/* 76 */
struct Graphics;

/* 77 */
struct BoundBox;

/* 78 */
struct TexImg;

/* 79 */
struct CollGroup;

/* 80 */
struct CurveSection;

/* 81 */
struct KTri;

/* 82 */
struct KSegment;

/* 83 */
struct Matrix3f;

/* 84 */
struct Matrix4f;

/* 85 */
struct BaseScalingSystem;

/* 86 */
struct ClassicScalingSystem;

/* 87 */
struct SoftImageScalingSystem;

/* 88 */
struct __declspec(align(4)) CoreNode
{
  _DWORD vtblPointer;
  char *name;
  CoreNode *Parent;
  CoreNode *Next;
  CoreNode *Child;
};

/* 89 */
struct SRTNode;

/* 90 */
struct NodeMgr;

/* 91 */
struct EditNode;

/* 92 */
struct RectArea;

/* 93 */
struct GfxobjInfo;

/* 94 */
struct GfxObject;

/* 95 */
struct CacheInfo;

/* 96 */
struct TexCacheInfo;

/* 97 */
struct StdSystem;

/* 98 */
struct ControllerMgr;

/* 99 */
struct AtxRouter;

/* 100 */
struct AtxStream;

/* 101 */
struct AtxFileStream;

/* 102 */
struct CullFrustum;

/* 103 */
struct Camera;

/* 104 */
struct Colour;

/* 105 */
struct DynCollObject;

/* 106 */
struct PVWKeyInfoS10;

/* 107 */
struct PVWLightingInfo;

/* 108 */
struct PVWTevColReg;

/* 109 */
struct LodInfo;

/* 110 */
struct AnimJoint;

/* 111 */
struct String;

/* 112 */
struct Envelope;

/* 113 */
struct MatobjInfo;

/* 114 */
struct DlobjInfo;

/* 115 */
struct MtxGroup;

/* 116 */
struct DataChunk;

/* 117 */
struct AnimData;

/* 118 */
struct AnimCacheInfo;

/* 119 */
struct AnimContext;

/* 120 */
struct RouteGroup;

/* 121 */
struct ShapeDynMaterials;

/* 122 */
struct BaseShape;

/* 123 */
struct Texture;

/* 124 */
struct DrawInfo;

/* 125 */
struct MaterialHandler;

/* 126 */
struct CachedShape;

/* 127 */
struct TimerInf;

/* 128 */
struct Timers;

/* 129 */
struct Light;

/* 130 */
struct Joint;

/* 131 */
struct CullingPlane;

/* 132 */
struct AyuCache;

/* 133 */
struct BaseApp;

/* 134 */
struct CmdStream;

/* 183 */
struct __declspec(align(4)) Module
{
  _DWORD newObjAddr;
  _DWORD objListAddr;
  _DWORD autoStartAddr;
  HMODULE loadedLibrary;
  LPCSTR fileName;
};

/* 135 */
struct Controller
{
  Module module0;
  _BYTE gap14[12];
  _DWORD dword20;
  _DWORD dword24;
  _DWORD dword28;
  _DWORD dword2C;
  _DWORD dword30;
  _DWORD dword34;
  _DWORD dword38;
  _DWORD dword3C;
  _DWORD dword40;
  _BYTE byte44;
  _BYTE byte45;
  _BYTE byte46;
  _BYTE byte47;
  _BYTE byte48;
  _BYTE byte49;
  _BYTE byte4A;
  _BYTE byte4B;
  _BYTE byte4C;
};

/* 136 */
struct ID32;

/* 137 */
struct AtxDirectRouter;

/* 138 */
struct WSocket;

/* 139 */
struct UIFrame;

/* 140 */
struct ComboBox;

/* 141 */
struct OptionBox;

/* 142 */
struct ModuleMgr;

/* 143 */
struct TcpStream;

/* 144 */
struct UIWindow;

/* 145 */
struct AyuHeap;

/* 146 */
struct PVWColourAnimInfo;

/* 147 */
struct PVWAlphaAnimInfo;

/* 148 */
struct BufferedOutputStream;

/* 149 */
struct PVWColourShortAnimInfo;

/* 150 */
struct PVWAlphaShortAnimInfo;

/* 151 */
struct PVWTexAnimInfo;

/* 152 */
struct BufferedStream;

/* 153 */
struct PVWTexGenData;

/* 154 */
struct SRT;

/* 155 */
struct BaseRoomInfo;

/* 156 */
struct KnotPoint;

/* 157 */
struct TexAttr;

/* 158 */
struct FntobjInfo;

/* 159 */
struct ShpobjInfo;

/* 160 */
struct AnmobjInfo;

/* 161 */
struct BinobjInfo;

/* 162 */
struct TexobjInfo;

/* 163 */
struct ShortColour;

/* 164 */
struct FontChar;

/* 165 */
struct PVWKeyInfoU8;

/* 166 */
struct PVWKeyInfoF32;

/* 167 */
struct PVWPolygonColourInfo;

/* 168 */
struct PVWPeInfo;

/* 169 */
struct PVWTextureData;

/* 170 */
struct PVWTextureInfo;

/* 171 */
struct PVWCombiner;

/* 172 */
struct VtxMatrix;

/* 173 */
struct LFInfo;

/* 174 */
struct LFlareGroup;

/* 175 */
struct DispList;

/* 176 */
struct AnimDca;

/* 177 */
struct AnimDck;

/* 178 */
struct AnimFrameCacher;

/* 179 */
struct AgeServer;

/* 180 */
struct TextureCacher;

/* 181 */
struct GameApp;

/* 182 */
struct UIMgr;

/* 184 */
struct RenderWindow;

/* 185 */
struct ToolWindow;

/* 186 */
struct SplitBar;

/* 187 */
struct VertSplitBar;

/* 188 */
struct HorzSplitBar;

/* 189 */
struct BaseCollTriInfo;

/* 190 */
struct CollTriInfo;

/* 191 */
struct KRect;

/* 192 */
struct MemInfoNode;

/* 193 */
struct AtxCommandStream;

/* 194 */
struct LinkedRoomInfo;

/* 195 */
struct LightFlare;

/* 196 */
struct PVWTevStage;

/* 197 */
struct PVWTevInfo;

/* 198 */
struct GfxInfo;

/* 199 */
struct FaceNode;

/* 200 */
struct Mesh;

/* 201 */
struct ObjCollInfo;

/* 202 */
struct Joint::MatPoly;

/* 203 */
struct SceneData;

/* 204 */
struct RouteLink;

/* 205 */
struct CacheTexture;

/* 206 */
struct LightGroup;

/* 207 */
struct RoutePoint;

/* 208 */
struct EditBox;

/* 209 */
struct ObjMgr;

/* 210 */
struct LightCamera;

/* 211 */
struct LightDataInfo;

/* 212 */
struct CamDataInfo;

/* 213 */
struct AppWindow;

/* 214 */
struct AnimPalette;

/* 215 */
struct Shape;

/* 216 */
struct System
{
  _DWORD dword0;
  _BYTE gap4[576];
  _DWORD dword244;
  _DWORD dword248;
  _BYTE byte24C;
  _BYTE byte24D;
  _BYTE byte24E;
  _DWORD dword250;
  _DWORD dword254;
  _DWORD dword258;
  _DWORD dword25C;
  _DWORD dword260;
  _BYTE gap264[76];
  _DWORD dword2B0;
  _BYTE gap2B4[388];
  _DWORD dword438;
  _BYTE gap43C[4];
  _DWORD dword440;
  _DWORD dword444;
  _DWORD dword448;
  _DWORD dword44C;
  _DWORD dword450;
  _DWORD dword454;
  _DWORD dword458;
  _DWORD dword45C;
  _DWORD dword460;
  _DWORD dword464;
  _DWORD dword468;
};

/* 217 */
struct __declspec(align(4)) Node
{
  int pVtbl;
  char *name;
  CoreNode *parent;
  CoreNode *next;
  CoreNode *child;
  _DWORD type;
  _DWORD flags;
  _DWORD dword1C;
};

/* 223 */
typedef LONG HRESULT;

/* 221 */
typedef _GUID GUID;

/* 220 */
typedef GUID IID;

/* 224 */
typedef unsigned int ULONG;

/* 225 */
typedef DWORD LCID;

/* 235 */
typedef unsigned __int16 wchar_t;

/* 234 */
typedef wchar_t WCHAR;

/* 321 */
typedef WCHAR *LPWSTR;

/* 231 */
typedef LONG DISPID;

/* 284 */
typedef tagDISPPARAMS DISPPARAMS;

/* 266 */
typedef tagVARIANT VARIANT;

/* 286 */
typedef tagEXCEPINFO EXCEPINFO;

/* 233 */
typedef WCHAR OLECHAR;

/* 279 */
typedef OLECHAR *BSTR;

/* 322 */
typedef BSTR *PBSTR;

/* 303 */
typedef int BOOL;

/* 323 */
typedef BOOL *PBOOL;

/* 219 */
struct NodeVtbl
{
  HRESULT (__stdcall *QueryInterface)(#218 *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(#218 *This);
  ULONG (__stdcall *Release)(#218 *This);
  HRESULT (__stdcall *GetTypeInfoCount)(#218 *This, UINT *pctinfo);
  HRESULT (__stdcall *GetTypeInfo)(#218 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetIDsOfNames)(#218 *This, const IID *const riid, LPWSTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
  HRESULT (__stdcall *Invoke)(#218 *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
  HRESULT (__stdcall *get_Name)(#218 *This, PBSTR Name);
  HRESULT (__stdcall *get_Property)(#218 *This, BSTR PropertyName, PBSTR PropertyValue);
  HRESULT (__stdcall *get_Bookmark)(#218 *This, PBSTR Bookmark);
  HRESULT (__stdcall *IsScopeNode)(#218 *This, PBOOL IsScopeNode);
  HRESULT (__stdcall *get_Nodetype)(#218 *This, PBSTR Nodetype);
};

/* 222 */
struct _GUID
{
  DWORD Data1;
  WORD Data2;
  WORD Data3;
  BYTE Data4[8];
};

/* 226 */
#pragma pack(push, 8)
struct ITypeInfo
{
  ITypeInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 265 */
typedef VARIANT VARIANTARG;

/* 285 */
#pragma pack(push, 8)
struct tagDISPPARAMS
{
  VARIANTARG *rgvarg;
  DISPID *rgdispidNamedArgs;
  UINT cArgs;
  UINT cNamedArgs;
};
#pragma pack(pop)

/* 246 */
typedef unsigned __int16 VARTYPE;

/* 271 */
typedef __int16 SHORT;

/* 272 */
typedef float FLOAT;

/* 273 */
typedef double DOUBLE;

/* 274 */
typedef __int16 VARIANT_BOOL;

/* 257 */
typedef LONG SCODE;

/* 277 */
#pragma pack(push, 8)
struct tagCY::$983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};
#pragma pack(pop)

/* 276 */
#pragma pack(push, 8)
union tagCY
{
  #pragma pack(push, 8)
  struct
  {
    unsigned int Lo;
    int Hi;
  };
  #pragma pack(pop)
  LONGLONG int64;
};
#pragma pack(pop)

/* 275 */
typedef tagCY CY;

/* 278 */
typedef double DATE;

/* 289 */
typedef tagSAFEARRAY SAFEARRAY;

/* 242 */
typedef unsigned __int16 USHORT;

/* 291 */
typedef int INT;

/* 292 */
typedef tagDEC DECIMAL;

/* 299 */
#pragma pack(push, 8)
struct tagVARIANT::$::$::$E3ADF3533BFFE4E09553D0C58E41D45E::$0FDBD249F1AECD6A49409B6B82281578
{
  PVOID pvRecord;
  IRecordInfo *pRecInfo;
};
#pragma pack(pop)

/* 270 */
#pragma pack(push, 8)
union tagVARIANT::$::$2E851DBA257FA738680F86C475CAC6EB::$E3ADF3533BFFE4E09553D0C58E41D45E
{
  LONG lVal;
  BYTE bVal;
  SHORT iVal;
  FLOAT fltVal;
  DOUBLE dblVal;
  VARIANT_BOOL boolVal;
  SCODE scode;
  CY cyVal;
  DATE date;
  BSTR bstrVal;
  IUnknown *punkVal;
  IDispatch *pdispVal;
  SAFEARRAY *parray;
  BYTE *pbVal;
  SHORT *piVal;
  LONG *plVal;
  FLOAT *pfltVal;
  DOUBLE *pdblVal;
  VARIANT_BOOL *pboolVal;
  SCODE *pscode;
  CY *pcyVal;
  DATE *pdate;
  BSTR *pbstrVal;
  IUnknown **ppunkVal;
  IDispatch **ppdispVal;
  SAFEARRAY **pparray;
  VARIANT *pvarVal;
  PVOID byref;
  CHAR cVal;
  USHORT uiVal;
  ULONG ulVal;
  INT intVal;
  UINT uintVal;
  DECIMAL *pdecVal;
  CHAR *pcVal;
  USHORT *puiVal;
  ULONG *pulVal;
  INT *pintVal;
  UINT *puintVal;
  #pragma pack(push, 8)
  struct
  {
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 269 */
#pragma pack(push, 8)
struct tagVARIANT::$CFEED276C078973BD7512520F6B5AF6E::$2E851DBA257FA738680F86C475CAC6EB
{
  VARTYPE vt;
  WORD wReserved1;
  WORD wReserved2;
  WORD wReserved3;
  #pragma pack(push, 8)
  union
  {
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    INT *pintVal;
    UINT *puintVal;
    #pragma pack(push, 8)
    struct
    {
      PVOID pvRecord;
      IRecordInfo *pRecInfo;
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 295 */
#pragma pack(push, 8)
struct tagDEC::$64EC678C49E7BE49873AFBFB7A849D34::$7F8459940C2B08BD5D82B0F27239141B
{
  BYTE scale;
  BYTE sign;
};
#pragma pack(pop)

/* 294 */
#pragma pack(push, 8)
union tagDEC::$64EC678C49E7BE49873AFBFB7A849D34
{
  #pragma pack(push, 8)
  struct
  {
    BYTE scale;
    BYTE sign;
  };
  #pragma pack(pop)
  USHORT signscale;
};
#pragma pack(pop)

/* 297 */
#pragma pack(push, 8)
struct tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301::$674876891A86A76F12C10005982BCA56
{
  ULONG Lo32;
  ULONG Mid32;
};
#pragma pack(pop)

/* 298 */
typedef unsigned __int64 ULONGLONG;

/* 296 */
#pragma pack(push, 8)
union tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301
{
  #pragma pack(push, 8)
  struct
  {
    ULONG Lo32;
    ULONG Mid32;
  };
  #pragma pack(pop)
  ULONGLONG Lo64;
};
#pragma pack(pop)

/* 293 */
#pragma pack(push, 8)
struct tagDEC
{
  USHORT wReserved;
  #pragma pack(push, 8)
  union
  {
    #pragma pack(push, 8)
    struct
    {
      BYTE scale;
      BYTE sign;
    };
    #pragma pack(pop)
    USHORT signscale;
  };
  #pragma pack(pop)
  ULONG Hi32;
  #pragma pack(push, 8)
  union
  {
    #pragma pack(push, 8)
    struct
    {
      ULONG Lo32;
      ULONG Mid32;
    };
    #pragma pack(pop)
    ULONGLONG Lo64;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 268 */
#pragma pack(push, 8)
union tagVARIANT::$CFEED276C078973BD7512520F6B5AF6E
{
  #pragma pack(push, 8)
  struct
  {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    #pragma pack(push, 8)
    union
    {
      LONG lVal;
      BYTE bVal;
      SHORT iVal;
      FLOAT fltVal;
      DOUBLE dblVal;
      VARIANT_BOOL boolVal;
      SCODE scode;
      CY cyVal;
      DATE date;
      BSTR bstrVal;
      IUnknown *punkVal;
      IDispatch *pdispVal;
      SAFEARRAY *parray;
      BYTE *pbVal;
      SHORT *piVal;
      LONG *plVal;
      FLOAT *pfltVal;
      DOUBLE *pdblVal;
      VARIANT_BOOL *pboolVal;
      SCODE *pscode;
      CY *pcyVal;
      DATE *pdate;
      BSTR *pbstrVal;
      IUnknown **ppunkVal;
      IDispatch **ppdispVal;
      SAFEARRAY **pparray;
      VARIANT *pvarVal;
      PVOID byref;
      CHAR cVal;
      USHORT uiVal;
      ULONG ulVal;
      INT intVal;
      UINT uintVal;
      DECIMAL *pdecVal;
      CHAR *pcVal;
      USHORT *puiVal;
      ULONG *pulVal;
      INT *pintVal;
      UINT *puintVal;
      #pragma pack(push, 8)
      struct
      {
        PVOID pvRecord;
        IRecordInfo *pRecInfo;
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
  DECIMAL decVal;
};
#pragma pack(pop)

/* 267 */
#pragma pack(push, 8)
struct tagVARIANT
{
  #pragma pack(push, 8)
  union
  {
    #pragma pack(push, 8)
    struct
    {
      VARTYPE vt;
      WORD wReserved1;
      WORD wReserved2;
      WORD wReserved3;
      #pragma pack(push, 8)
      union
      {
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        BSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        SAFEARRAY *parray;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        SAFEARRAY **pparray;
        VARIANT *pvarVal;
        PVOID byref;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        #pragma pack(push, 8)
        struct
        {
          PVOID pvRecord;
          IRecordInfo *pRecInfo;
        };
        #pragma pack(pop)
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
    DECIMAL decVal;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 287 */
#pragma pack(push, 8)
struct tagEXCEPINFO
{
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  SCODE scode;
};
#pragma pack(pop)

/* 228 */
typedef tagTYPEATTR TYPEATTR;

/* 255 */
typedef tagFUNCDESC FUNCDESC;

/* 310 */
typedef tagVARDESC VARDESC;

/* 230 */
typedef DISPID MEMBERID;

/* 245 */
typedef DWORD HREFTYPE;

/* 232 */
typedef OLECHAR *LPOLESTR;

/* 307 */
enum tagINVOKEKIND
{
  INVOKE_FUNC = 0x1,
  INVOKE_PROPERTYGET = 0x2,
  INVOKE_PROPERTYPUT = 0x4,
  INVOKE_PROPERTYPUTREF = 0x8,
};

/* 306 */
typedef tagINVOKEKIND INVOKEKIND;

/* 227 */
#pragma pack(push, 8)
struct ITypeInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeInfo *This);
  ULONG (__stdcall *Release)(ITypeInfo *This);
  HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);
  HRESULT (__stdcall *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);
  HRESULT (__stdcall *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
  HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);
  HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);
  HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
  HRESULT (__stdcall *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
  HRESULT (__stdcall *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
  HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
  HRESULT (__stdcall *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj);
  HRESULT (__stdcall *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);
  HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
  void (__stdcall *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);
  void (__stdcall *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);
  void (__stdcall *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);
};
#pragma pack(pop)

/* 280 */
#pragma pack(push, 8)
struct IUnknown
{
  IUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 282 */
#pragma pack(push, 8)
struct IDispatch
{
  IDispatchVtbl *lpVtbl;
};
#pragma pack(pop)

/* 244 */
#pragma pack(push, 8)
struct tagSAFEARRAYBOUND
{
  ULONG cElements;
  LONG lLbound;
};
#pragma pack(pop)

/* 243 */
typedef tagSAFEARRAYBOUND SAFEARRAYBOUND;

/* 290 */
#pragma pack(push, 8)
struct tagSAFEARRAY
{
  USHORT cDims;
  USHORT fFeatures;
  ULONG cbElements;
  ULONG cLocks;
  PVOID pvData;
  SAFEARRAYBOUND rgsabound[1];
};
#pragma pack(pop)

/* 300 */
#pragma pack(push, 8)
struct IRecordInfo
{
  IRecordInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 237 */
enum tagTYPEKIND
{
  TKIND_ENUM = 0x0,
  TKIND_RECORD = 0x1,
  TKIND_MODULE = 0x2,
  TKIND_INTERFACE = 0x3,
  TKIND_DISPATCH = 0x4,
  TKIND_COCLASS = 0x5,
  TKIND_ALIAS = 0x6,
  TKIND_UNION = 0x7,
  TKIND_MAX = 0x8,
};

/* 236 */
typedef tagTYPEKIND TYPEKIND;

/* 240 */
#pragma pack(push, 8)
union tagTYPEDESC::$AC700B6542D8071E244CADABF8A32897
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  HREFTYPE hreftype;
};
#pragma pack(pop)

/* 239 */
#pragma pack(push, 8)
struct tagTYPEDESC
{
  #pragma pack(push, 8)
  union
  {
    tagTYPEDESC *lptdesc;
    tagARRAYDESC *lpadesc;
    HREFTYPE hreftype;
  };
  #pragma pack(pop)
  VARTYPE vt;
};
#pragma pack(pop)

/* 238 */
typedef tagTYPEDESC TYPEDESC;

/* 248 */
#pragma pack(push, 8)
struct tagIDLDESC
{
  ULONG dwReserved;
  USHORT wIDLFlags;
};
#pragma pack(pop)

/* 247 */
typedef tagIDLDESC IDLDESC;

/* 229 */
#pragma pack(push, 8)
struct tagTYPEATTR
{
  GUID guid;
  LCID lcid;
  DWORD dwReserved;
  MEMBERID memidConstructor;
  MEMBERID memidDestructor;
  LPOLESTR lpstrSchema;
  ULONG cbSizeInstance;
  TYPEKIND typekind;
  WORD cFuncs;
  WORD cVars;
  WORD cImplTypes;
  WORD cbSizeVft;
  WORD cbAlignment;
  WORD wTypeFlags;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  TYPEDESC tdescAlias;
  IDLDESC idldescType;
};
#pragma pack(pop)

/* 249 */
#pragma pack(push, 8)
struct ITypeComp
{
  ITypeCompVtbl *lpVtbl;
};
#pragma pack(pop)

/* 258 */
typedef tagELEMDESC ELEMDESC;

/* 305 */
enum tagFUNCKIND
{
  FUNC_VIRTUAL = 0x0,
  FUNC_PUREVIRTUAL = 0x1,
  FUNC_NONVIRTUAL = 0x2,
  FUNC_STATIC = 0x3,
  FUNC_DISPATCH = 0x4,
};

/* 304 */
typedef tagFUNCKIND FUNCKIND;

/* 309 */
enum tagCALLCONV
{
  CC_FASTCALL = 0x0,
  CC_CDECL = 0x1,
  CC_MSCPASCAL = 0x2,
  CC_PASCAL = 0x2,
  CC_MACPASCAL = 0x3,
  CC_STDCALL = 0x4,
  CC_FPFASTCALL = 0x5,
  CC_SYSCALL = 0x6,
  CC_MPWCDECL = 0x7,
  CC_MPWPASCAL = 0x8,
  CC_MAX = 0x9,
};

/* 308 */
typedef tagCALLCONV CALLCONV;

/* 263 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 262 */
#pragma pack(push, 8)
struct tagPARAMDESC
{
  LPPARAMDESCEX pparamdescex;
  USHORT wParamFlags;
};
#pragma pack(pop)

/* 261 */
typedef tagPARAMDESC PARAMDESC;

/* 260 */
#pragma pack(push, 8)
union tagELEMDESC::$7C8F4CED1424251743D09680A1A0B07D
{
  IDLDESC idldesc;
  PARAMDESC paramdesc;
};
#pragma pack(pop)

/* 259 */
#pragma pack(push, 8)
struct tagELEMDESC
{
  TYPEDESC tdesc;
  #pragma pack(push, 8)
  union
  {
    IDLDESC idldesc;
    PARAMDESC paramdesc;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 256 */
#pragma pack(push, 8)
struct tagFUNCDESC
{
  MEMBERID memid;
  SCODE *lprgscode;
  ELEMDESC *lprgelemdescParam;
  FUNCKIND funckind;
  INVOKEKIND invkind;
  CALLCONV callconv;
  SHORT cParams;
  SHORT cParamsOpt;
  SHORT oVft;
  SHORT cScodes;
  ELEMDESC elemdescFunc;
  WORD wFuncFlags;
};
#pragma pack(pop)

/* 312 */
#pragma pack(push, 8)
union tagVARDESC::$E6274BD6A7149C9CC2413444FF769F0B
{
  ULONG oInst;
  VARIANT *lpvarValue;
};
#pragma pack(pop)

/* 314 */
enum tagVARKIND
{
  VAR_PERINSTANCE = 0x0,
  VAR_STATIC = 0x1,
  VAR_CONST = 0x2,
  VAR_DISPATCH = 0x3,
};

/* 313 */
typedef tagVARKIND VARKIND;

/* 311 */
#pragma pack(push, 8)
struct tagVARDESC
{
  MEMBERID memid;
  LPOLESTR lpstrSchema;
  #pragma pack(push, 8)
  union
  {
    ULONG oInst;
    VARIANT *lpvarValue;
  };
  #pragma pack(pop)
  ELEMDESC elemdescVar;
  WORD wVarFlags;
  VARKIND varkind;
};
#pragma pack(pop)

/* 315 */
#pragma pack(push, 8)
struct ITypeLib
{
  ITypeLibVtbl *lpVtbl;
};
#pragma pack(pop)

/* 281 */
#pragma pack(push, 8)
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IUnknown *This);
  ULONG (__stdcall *Release)(IUnknown *This);
};
#pragma pack(pop)

/* 283 */
#pragma pack(push, 8)
struct IDispatchVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDispatch *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IDispatch *This);
  ULONG (__stdcall *Release)(IDispatch *This);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
  HRESULT (__stdcall *Invoke)(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
};
#pragma pack(pop)

/* 302 */
typedef const OLECHAR *LPCOLESTR;

/* 301 */
#pragma pack(push, 8)
struct IRecordInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(IRecordInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IRecordInfo *This);
  ULONG (__stdcall *Release)(IRecordInfo *This);
  HRESULT (__stdcall *RecordInit)(IRecordInfo *This, PVOID pvNew);
  HRESULT (__stdcall *RecordClear)(IRecordInfo *This, PVOID pvExisting);
  HRESULT (__stdcall *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);
  HRESULT (__stdcall *GetGuid)(IRecordInfo *This, GUID *pguid);
  HRESULT (__stdcall *GetName)(IRecordInfo *This, BSTR *pbstrName);
  HRESULT (__stdcall *GetSize)(IRecordInfo *This, ULONG *pcbSize);
  HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);
  HRESULT (__stdcall *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);
  HRESULT (__stdcall *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);
  BOOL (__stdcall *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);
  PVOID (__stdcall *RecordCreate)(IRecordInfo *This);
  HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);
  HRESULT (__stdcall *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);
};
#pragma pack(pop)

/* 241 */
#pragma pack(push, 8)
struct tagARRAYDESC
{
  TYPEDESC tdescElem;
  USHORT cDims;
  SAFEARRAYBOUND rgbounds[1];
};
#pragma pack(pop)

/* 252 */
enum tagDESCKIND
{
  DESCKIND_NONE = 0x0,
  DESCKIND_FUNCDESC = 0x1,
  DESCKIND_VARDESC = 0x2,
  DESCKIND_TYPECOMP = 0x3,
  DESCKIND_IMPLICITAPPOBJ = 0x4,
  DESCKIND_MAX = 0x5,
};

/* 251 */
typedef tagDESCKIND DESCKIND;

/* 253 */
typedef tagBINDPTR BINDPTR;

/* 250 */
#pragma pack(push, 8)
struct ITypeCompVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeComp *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeComp *This);
  ULONG (__stdcall *Release)(ITypeComp *This);
  HRESULT (__stdcall *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
  HRESULT (__stdcall *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
};
#pragma pack(pop)

/* 264 */
#pragma pack(push, 8)
struct tagPARAMDESCEX
{
  ULONG cBytes;
  VARIANTARG varDefaultValue;
};
#pragma pack(pop)

/* 317 */
typedef tagTLIBATTR TLIBATTR;

/* 316 */
#pragma pack(push, 8)
struct ITypeLibVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeLib *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeLib *This);
  ULONG (__stdcall *Release)(ITypeLib *This);
  UINT (__stdcall *GetTypeInfoCount)(ITypeLib *This);
  HRESULT (__stdcall *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);
  HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *This, const GUID *const guid, ITypeInfo **ppTinfo);
  HRESULT (__stdcall *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
  HRESULT (__stdcall *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
  void (__stdcall *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);
};
#pragma pack(pop)

/* 254 */
#pragma pack(push, 8)
union tagBINDPTR
{
  FUNCDESC *lpfuncdesc;
  VARDESC *lpvardesc;
  ITypeComp *lptcomp;
};
#pragma pack(pop)

/* 320 */
enum tagSYSKIND
{
  SYS_WIN16 = 0x0,
  SYS_WIN32 = 0x1,
  SYS_MAC = 0x2,
};

/* 319 */
typedef tagSYSKIND SYSKIND;

/* 318 */
#pragma pack(push, 8)
struct tagTLIBATTR
{
  GUID guid;
  LCID lcid;
  SYSKIND syskind;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  WORD wLibFlags;
};
#pragma pack(pop)

/* 325 */
struct struct_this
{
  _BYTE byte0;
  CoreNode corenode4;
};

/* 326 */
struct struct_this_1
{
  _BYTE gap0[4];
  struct CoreNode corenode4;
};

